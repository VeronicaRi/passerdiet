#########################################################################################################
#
# MuHiSSE for diet and carotenoids in passerine birds
#
# authors: Veronica Rincon Rubio
# Last updated: 10/22/2019
#########################################################################################################


#######################
# Reading the Data #
#######################

setOption("useScaling", "true")

NUM_STATES=4
NUM_HIDDEN = 2
NUM_RATES = NUM_STATES * NUM_HIDDEN

### Reading data
data = readCharacterDataDelimited(file="/Users/veronicari/Documentos/GitHub/passerdiet/Data/pasermuse.tsv", stateLabels=4, type="NaturalNumbers", delimiter="\t", headers=FALSE)

# we need to expand the data to the hidden states
data_exp <- data.expandCharacters( NUM_HIDDEN )

### Reading phylogeny
phylogeny <- readTrees(file="/Users/veronicari/Documentos/GitHub/passerdiet/Data/passertree.nex")[1]

# Get some useful variables from the data. We need these later on.
taxa <- phylogeny.taxa()

# set my move index
mvi = 0
mni = 0

H = 0.587405

####################
# Create the rates #
####################


### Specify a prior on the diversification and turnover rate

### Create the constant prior parameters of the diversification rates
## Number of surviving lineages
rate_mean <- ln( ln(5983.0/2.0) / phylogeny.rootAge() )
rate_sd <- 2*H


for (i in 1:NUM_STATES) {

### Create a lognormal distributed variable for the diversification rate
speciation_alpha[i] ~ dnNormal(mean=rate_mean,sd=rate_sd)
moves[++mvi] = mvSlide(speciation_alpha[i],delta=0.20,tune=true,weight=3.0)


### Create a lognormal distributed variable for the turnover rate
extinction_alpha[i] ~ dnNormal(mean=rate_mean,sd=rate_sd)
moves[++mvi] = mvSlide(extinction_alpha[i],delta=0.20,tune=true,weight=3.0)

}



for (i in 1:NUM_HIDDEN) {

### Create an exponential distributed variable for the diversification rate
speciation_beta[i] ~ dnExp(1.0)
moves[++mvi] = mvScale(speciation_beta[i],lambda=0.20,tune=true,weight=2.0)

### Create an normal distributed variable for the turnover rate
extinction_beta[i] ~ dnExp(1.0)
moves[++mvi] = mvSlide(extinction_beta[i],delta=0.20,tune=true,weight=2.0)

}



for (j in 1:NUM_HIDDEN) {
for (i in 1:NUM_STATES) {
if ( j == 1) {
speciation[i] := exp( speciation_alpha[i] )
extinction[i] := exp( extinction_alpha[i] )
} else {
index = i+(j*NUM_STATES)-NUM_STATES
speciation[index] := speciation[index-NUM_STATES] * exp( speciation_beta[j-1] )
extinction[index] := exp( extinction_alpha[i] + extinction_beta[j-1] )
}
}
}

#########################################################
# Set up the transition rate matrix for observed states #
#########################################################

## When I defined very loosely my gamma priors
shape_pr := 0.5
rate_pr := 1


############### Alternative definition or rate parameter
# Each transition rate between observed states are drawn
# from an exponential distribution with a mean of 10
# character state transitions over the tree.
# shape_pr := 0.5
# rate_pr := phylogeny.treeLength() / 40

# first initialize the matrix with all zeros:
for (i in 1:8) {
for (j in 1:8) {
q[i][j] := 0.0
}
}


### Rate parameters in the Q matrix that aren't zero
rate_12 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### 0W to 1W
rate_21 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### 0W to 1W
rate_23 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### 1W to 1C
rate_32 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### 1C to 1W
rate_34 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### 1C to 0C
rate_43 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### 0C to 1C
rate_14 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### 0W to 0C
rate_41 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### 0C to 0W


moves[++mvi] = mvScale( rate_12, weight=2 )
moves[++mvi] = mvScale( rate_21, weight=2 )
moves[++mvi] = mvScale( rate_23, weight=2 )
moves[++mvi] = mvScale( rate_32, weight=2 )
moves[++mvi] = mvScale( rate_34, weight=2 )
moves[++mvi] = mvScale( rate_43, weight=2 )
moves[++mvi] = mvScale( rate_14, weight=2 )
moves[++mvi] = mvScale( rate_41, weight=2 )

# first initialize the matrix with all zeros:
for (i in 1:8) {
for (j in 1:8) {
q[i][j] := 0.0
}
}

##Matrix
q[1][2] := rate_12
q[2][1] := rate_21
q[2][3] := rate_23
q[3][2] := rate_32
q[3][4] := rate_34
q[4][3] := rate_43
q[1][4] := rate_14
q[4][1] := rate_41

q[5][6] := rate_12
q[6][5] := rate_21
q[6][7] := rate_23
q[7][6] := rate_32
q[7][8] := rate_34
q[8][7] := rate_43
q[5][8] := rate_14
q[8][5] := rate_41



#########################################################
# Set up the transition rate matrix for hidden states #
#########################################################

hidden_rate1 ~ dnExponential(rate_pr)
moves[++mvi] = mvScale(hidden_rate1,lambda=0.2,tune=true,weight=5)
hidden_rate2 ~ dnExponential(rate_pr)
moves[++mvi] = mvScale(hidden_rate2,lambda=0.2,tune=true,weight=5)
q[1][5] := hidden_rate1
q[2][6] := hidden_rate1
q[3][7] := hidden_rate1
q[4][8] := hidden_rate1
q[5][1] := hidden_rate2
q[6][2] := hidden_rate2
q[7][3] := hidden_rate2
q[8][4] := hidden_rate2


######################################################################
# Create the rate matrix for the combined observed and hidden states #
######################################################################

rate_matrix := fnFreeK(q, rescaled=false)


### Create a constant variable with the prior probabilities of each rate category at the root.
rate_category_prior ~ dnDirichlet( rep(1,NUM_RATES) )
moves[++mvi] = mvBetaSimplex(rate_category_prior,tune=true,weight=2)
moves[++mvi] = mvDirichletSimplex(rate_category_prior,tune=true,weight=2)
##Diferencia con el BiSSE

### Create the fix parameter for the age of the root set to the observed age
root <- phylogeny.rootAge()

### rho is the probability of sampling species at the present
### Adding sampling of species via rho parameter
### fix this to 5022/5983
rho <- phylogeny.ntips()/5983


#### construct a variable for the tree drawn from a birth death process
timetree ~ dnCDBDP( rootAge = root,
speciationRates   = speciation,
extinctionRates   = extinction,
Q                 = rate_matrix,
pi                = rate_category_prior,
delta             = 1.0,
rho               = rho)


### clamp the model with the "observed" tree
timetree.clamp( phylogeny )
timetree.clampCharData( data_exp )

#############
# The Model #
#############


### workspace model wrapper ###
mymodel = model(rate_matrix)

monitors[++mni] = mnModel(filename="/Users/veronicari/Documentos/GitHub/passerdiet/output/MuHiSSE_dietncar2.log", printgen=1)
monitors[++mni] = mnJointConditionalAncestralState(tree=timetree, cdbdp=timetree, type="NaturalNumbers", printgen=100, withTips=true, withStartStates=false, filename="/Users/veronicari/Documentos/GitHub/passerdiet/output/anc_states_MuHiSSE_dietncar.log")
monitors[++mni] = mnScreen(printgen=10, q)



################
# The Analysis #
################

### workspace mcmc
mymcmc = mcmc(mymodel, monitors, moves, nruns=1, moveschedule="random")

### pre-burnin to tune the proposals
mymcmc.burnin(generations=1500,tuningInterval=100)

### run the MCMC
mymcmc.run(generations=150000)


