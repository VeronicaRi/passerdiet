######################
## HiSSE
######################
## HiSSE: Hidden diversification
## Carotenoid coloration birds
## Veronica Rincon Rubio
## Last Updated:21/10/2019

######################

#######################
# Reading in the Data #
#######################
setOption("useScaling","true")
NUM_STATES = 2
NUM_HIDDEN = 2
NUM_RATES = NUM_STATES * NUM_HIDDEN

###### This just defines a single model for all sites #######

### Reading data
data = readCharacterDataDelimited(file="passerdiet/passerdiet/Data/pasercar.tsv", stateLabels=2, type="NaturalNumbers", delimiter="\t", headers=FALSE)

# we need to expand the data to the hidden states
data_exp <- data.expandCharacters( NUM_HIDDEN )


### Reading phylogeny 
phylogeny = readTrees(file="passerdiet/passerdiet/Data/passertree.nex")[1]


# Get some useful variables from the data. We need these later on.
taxa <- phylogeny.taxa()


# set my move index
mvi = 0
mni = 0

H = 0.587405



####################
# Create the rates #
####################


### Specify a prior on the diversification and turnover rate

### Create the constant prior parameters of the diversification rates
rate_mean <- ln( ln(5983.0/2.0) / phylogeny.rootAge() )
rate_sd <- 2*H


for (i in 1:NUM_STATES) {
### Create a lognormal distributed variable for the diversification rate
speciation_alpha[i] ~ dnNormal(mean=rate_mean,sd=rate_sd)
moves[++mvi] = mvSlide(speciation_alpha[i],delta=0.20,tune=true,weight=3.0)


### Create a lognormal distributed variable for the turnover rate
extinction_alpha[i] ~ dnNormal(mean=rate_mean,sd=rate_sd)
moves[++mvi] = mvSlide(extinction_alpha[i],delta=0.20,tune=true,weight=3.0)


}




for (i in 1:NUM_HIDDEN) {

### Create an exponential distributed variable for the diversification rate
speciation_beta[i] ~ dnExp(1.0)
moves[++mvi] = mvScale(speciation_beta[i],lambda=0.20,tune=true,weight=2.0)

### Create an normal distributed variable for the turnover rate
extinction_beta[i] ~ dnExp(1.0)
moves[++mvi] = mvSlide(extinction_beta[i],delta=0.20,tune=true,weight=2.0)

}



for (j in 1:NUM_HIDDEN) {
for (i in 1:NUM_STATES) {
if ( j == 1) {
speciation[i] := exp( speciation_alpha[i] )
extinction[i] := exp( extinction_alpha[i] )
} else {
index = i+(j*NUM_STATES)-NUM_STATES
speciation[index] := speciation[index-NUM_STATES] * exp( speciation_beta[j-1] )
extinction[index] := exp( extinction_alpha[i] + extinction_beta[j-1] )
}
}
}



#########################################################
# Set up the transition rate matrix for observed states #
#########################################################



## I defined very loosely my gamma priors for rates in the Q-mat
shape_pr <- 0.5
rate_pr := 1

############### Alternative definition or rate parameter
# Each transition rate between observed states are drawn
# from an exponential distribution with a mean of 40
# character state transitions over the tree.
#rate_pr := phylogeny.treeLength() / 40

for (i in 1:4) {
for (j in 1:4) {
q[i][j] := 0.0
}
}


rate_12 ~ dnGamma(shape=shape_pr, rate=rate_pr)
rate_21 ~ dnGamma(shape=shape_pr, rate=rate_pr)
moves[++mvi] = mvScale( rate_12, weight=2 )
moves[++mvi] = mvScale( rate_21, weight=2 )

q[1][2] := rate_12
q[3][4] := rate_12
q[2][1] := rate_21
q[4][3] := rate_21





#########################################################
# Set up the transition rate matrix for hidden states #
#########################################################
hidden_rate1 ~ dnExponential(rate_pr)
moves[++mvi] = mvScale(hidden_rate1,lambda=0.2,tune=true,weight=5)
hidden_rate2 ~ dnExponential(rate_pr)
moves[++mvi] = mvScale(hidden_rate2,lambda=0.2,tune=true,weight=5)
q[1][3] := hidden_rate1
q[2][4] := hidden_rate1
q[3][1] := hidden_rate2
q[4][2] := hidden_rate2


######################################################################
# Create the rate matrix for the combined observed and hidden states #
######################################################################
rate_matrix := fnFreeK(q, rescaled=false, matrixExponentialMethod="scalingAndSquaring")


#####################################
# Set up the root state frequencies #
#####################################

### Create a constant variable with the prior probabilities of each rate category at the root.
rate_category_prior ~ dnDirichlet( rep(1,NUM_RATES) )
moves[++mvi] = mvBetaSimplex(rate_category_prior,tune=true,weight=2)
moves[++mvi] = mvDirichletSimplex(rate_category_prior,tune=true,weight=2)
##Diferencia con el BiSSE

### Create the fix parameter for the age of the root set to the observed age
root <- phylogeny.rootAge()


### rho is the probability of sampling species at the present
### I did not add any sampling of species but it is posible by setting this rho parameter
### fix this to 5022/5983
rho <- phylogeny.ntips()/5983

#### construct a variable for the tree drawn from a birth death process
timetree ~ dnCDBDP( rootAge           = root,
speciationRates   = speciation,
extinctionRates   = extinction,
Q                 = rate_matrix,
pi                = rate_category_prior,
rho               = rho,
delta             = 1.0,
condition         = "time" )

timetree.clamp( phylogeny )
timetree.clampCharData( data_exp )

#############
# The Model #
#############


### workspace model wrapper ###
mymodel = model(rate_matrix)


### set up the monitors that will output parameter values to file and screen
monitors[++mni] = mnModel(filename="passerdiet/passerdiet/Data/output/HiSSE_carotenoids.log", printgen=1)
monitors[++mni] = mnJointConditionalAncestralState(tree=timetree, cdbdp=timetree, type="NaturalNumbers", printgen=100, withTips=true, withStartStates=false, filename="passerdiet/passerdiet/Data/output/anc_states_HiSSE_carotenoids.log")
monitors[++mni] = mnScreen(printgen=10, q)
##por quÃ© en el BiSSE le ponemos speciation y extinction 



################
# The Analysis #
################

### workspace mcmc
mymcmc = mcmc(mymodel, monitors, moves, nruns=1, moveschedule="random")


### pre-burnin to tune the proposals
mymcmc.burnin(generations=1500,tuningInterval=100)

### run the MCMC
mymcmc.run(generations=150000)


##############################
# Summarize ancestral states #
##############################


#anc_states = readAncestralStateTrace("passerdiet/passerdiet/Data/output/anc_states_HiSSE_carotenoids.log")
#anc_tree = ancestralStateTree(tree=phylogeny, ancestral_state_trace_vector=anc_states, include_start_states=false, file="passerdiet/passerdiet/Data/output/anc_states_summaryHiSSEtreecarotenoids.tree", burnin=5000, summary_statistic="MAP", site=0)

q()



