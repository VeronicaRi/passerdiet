######################
## MCMC
######################
## Mkn: Model for binary trait evolution
######################



##Reading data
data = readCharacterDataDelimited(file="passerdiet/passerdiet/Data/paserdat.tsv", stateLabels=2, type="NaturalNumbers", delimiter="\t", headers=FALSE)

##Reading phylogeny
T <- readTrees(file="passerdiet/passerdiet/Data/Unarbol.tre")[1]

mvi = 1 # Move counter

## Definition of hiper-priors
#Hyperpriors, how many changes of each tipe do we expect on the tree?
for (i in 1:2) {
num_events[i] ~ dnExponential(1/10)
moves[mvi++] = mvScale(num_events[i], lambda=2, weight=3)
rate_pr[i] := T.treeLength() / num_events[i]
}

# Transition rates of the matrix via the hyperpriors
alpha ~ dnExponential(rate_pr[1])
beta ~ dnExponential(rate_pr[2])

### Mk2 model start with a matrix full of zeros
for (i in 1:2){
for (j in 1:2){
        q[i][j]:= 0.0
    }
}

q[1][2] := alpha
q[2][1] := beta

# Define Q-matrix infinitesimal probability
Q := fnFreeK(q, rescaled=false)


# Root here is assumed to be another parameter (random)
root_frequencies ~ dnDirichlet(rep(1,2))
moves[mvi++] = mvBetaSimplex(root_frequencies, alpha=0.5, weight=3)
moves[mvi++] = mvElementSwapSimplex(root_frequencies, weight=3)


# Define the continuous time markov model
ctmc ~ dnPhyloCTMC(Q=Q, tree=T, nSites=1, rootFreq=root_frequencies, type="NaturalNumbers")

#Fix our observations of selfing to the tips
ctmc.clamp(data)

# Some necessary defaults
setOption("useScaling", "true")
setOption("scalingDensity", "1")
setOption("tolerance", "1e-9") # default 1e-09

####jalar todo el modelo pero no a partir del Ã¡rbol
mymodel = model(ctmc)

#Output what we are going to see
#####No me lo esta corriendo
monitors[1] = mnScreen(printgen=10)
monitors[2] = mnJointConditionalAncestralState(filename="passerdiet/passerdiet/Data/output/anc_states.log",printgen=10,tree=T,ctmc=ctmc,type="NaturalNumbers")
monitors[3] = mnStochasticCharacterMap(ctmc=ctmc,printgen=10,filename="passerdiet/passerdiet/Data/output/stoch_mapspoledis.log", include_simmap=true)
monitors[4] = mnModel(file="passerdiet/passerdiet/Data/output/mk_paser.log", printgen=1)

mymcmc = mcmc(mymodel, monitors, moves)
mymcmc.run(20000)


###############################
### Ancestral reconstructions
###############################

anc_state_trace = readAncestralStateTrace("passerdiet/passerdiet/Data/output/anc_states.log")
ancestralStateTree(T, anc_state_trace, "passerdiet/passerdiet/Data/output/finalpoledis.tree", burnin=0.25, reconstruction="marginal")

anc_state_trace = readAncestralStateTrace("passerdiet/passerdiet/Data/output/stoch_mapspoledis.log")
characterMapTree(T, anc_state_trace, character_file="passerdiet/passerdiet/Data/output/character_pole.tree", posterior_file="passerdiet/passerdiet/Data/output/posteriorpole.tree", burnin=5, reconstruction="marginal")

q()
