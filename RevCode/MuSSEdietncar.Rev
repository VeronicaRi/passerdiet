#########################################################################################################
#
# MuSSE Passerine Bird Diet
# Veronica Rincon Rubio
# Last Updated: 10/26/19
##########################################################################################

#######################
# Reading the Data #
#######################
setOption("useScaling", "true")

NUM_STATES=4


data = readCharacterDataDelimited(file="/Users/veronicari/Documentos/GitHub/passerdiet/Data/pasermuse.tsv", stateLabels=4, type="NaturalNumbers", delimiter="\t", headers=FALSE)


### Reading phylogeny
phylogeny <- readTrees(file="/Users/veronicari/Documentos/GitHub/passerdiet/Data/passertree.nex")[1]

# Get some useful variables from the data. We need these later on.
taxa <- phylogeny.taxa()

# set my move index
mvi = 0
mni = 0

H = 0.587405



####################
# Create the rates #
####################


### Create the constant prior parameters of the diversification rates
## Number of surviving lineages is 5983
rate_mean <- ln( ln(5983.0/2.0) / phylogeny.rootAge() )
rate_sd <- 2*H



for (i in 1:NUM_STATES) {

### Create a lognormal distributed variable for the diversification rate
log_speciation[i] ~ dnNormal(mean=rate_mean,sd=rate_sd)
log_speciation[i].setValue( rate_mean )
speciation[i] := exp( log_speciation[i] )
moves[++mvi] = mvSlide(log_speciation[i],delta=0.20,tune=true,weight=3.0)

### Create a lognormal distributed variable for the turnover rate
log_extinction[i] ~ dnNormal(mean=rate_mean,sd=rate_sd)
log_extinction[i].setValue( rate_mean )
extinction[i] := exp( log_extinction[i] )
moves[++mvi] = mvSlide(log_extinction[i],delta=0.20,tune=true,weight=3)

}


#########################################################
# Set up the transition rate matrix for observed states #
#########################################################
## I defined very loosely my gamma priors for rates in the Q-mat
shape_pr <- 0.5
rate_pr := 1


### Rate parameters in the Q matrix that aren't zero
rate_12 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### 0W to 1W
rate_21 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### 1W to 0W
rate_23 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### 1W to 1C
rate_32 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### 1C to 1W
rate_34 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### 1C to 0C
rate_43 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### 0C to 1C
rate_14 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### 0W to 0C
rate_41 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### 0C to 0W

#####No entiendo el orden que debo seguir aqui... acaso importa?

moves[++mvi] = mvScale( rate_12, weight=2 )
moves[++mvi] = mvScale( rate_21, weight=2 )
moves[++mvi] = mvScale( rate_23, weight=2 )
moves[++mvi] = mvScale( rate_32, weight=2 )
moves[++mvi] = mvScale( rate_34, weight=2 )
moves[++mvi] = mvScale( rate_43, weight=2 )
moves[++mvi] = mvScale( rate_14, weight=2 )
moves[++mvi] = mvScale( rate_41, weight=2 )

# first initialize the matrix with all zeros:
for (i in 1:4) {
for (j in 1:4) {
q[i][j] := 0.0
}
}

##Matrix
q[1][2] := rate_12
q[2][1] := rate_21
q[2][3] := rate_23
q[3][2] := rate_32
q[3][4] := rate_34
q[4][3] := rate_43
q[1][4] := rate_14
q[4][1] := rate_41


# generate the actual matrix
rate_matrix := fnFreeK(q, rescaled=false, matrixExponentialMethod="scalingAndSquaring")
###The function is the same for HiSSE

### Create a constant variable with the prior probabilities of each rate category at the root.
rate_category_prior ~ dnDirichlet( rep(1,NUM_STATES) )
moves[++mvi] = mvDirichletSimplex(rate_category_prior,tune=true,weight=2)


### Create the fix parameter for the age of the root set to the observed age
root <- phylogeny.rootAge()

### rho is the probability of sampling species at the present
### Adding sampling of species via rho parameter
### fix this to 5022/5983
rho <- phylogeny.ntips()/5983

#### construct a variable for the tree drawn from a birth death process
timetree ~ dnCDBDP( rootAge = root,
speciationRates   = speciation,
extinctionRates   = extinction,
Q                 = rate_matrix,
pi                = rate_category_prior,
rho               = rho,
delta             = 1.0,
condition         = "time")

### clamp the model with the "observed" tree
timetree.clamp( phylogeny )
timetree.clampCharData( data )

#############
# The Model #
#############


### workspace model wrapper ###
mymodel = model(rate_matrix)


### set up the monitors that will output parameter values to file and screen 
monitors[++mni] = mnModel(filename="/Users/veronicari/Documentos/GitHub/passerdiet/output/MuSSE_dietncar2.log", printgen=1)
monitors[++mni] = mnJointConditionalAncestralState(tree=timetree, cdbdp=timetree, type="NaturalNumbers", printgen=100, withTips=true, withStartStates=false, filename="/Users/veronicari/Documentos/GitHub/passerdiet/outputanc_states_MuSSE_dietncar.log")
monitors[++mni] = mnScreen(printgen=10, q)

##Es lo mismo poner monitors[++mni] = mnScreen(printgen=10, q)??


################
# The Analysis #
################

### workspace mcmc
mymcmc = mcmc(mymodel, monitors, moves, nruns=1, moveschedule="random")


### pre-burnin to tune the proposals
mymcmc.burnin(generations=1500,tuningInterval=100)

### run the MCMC
mymcmc.run(generations=150000)


##############################
# Summarize ancestral states #
##############################


anc_states = readAncestralStateTrace("/Users/veronicari/Documentos/GitHub/passerdiet/Output/MuSSE_dietncar.log")

anc_tree = ancestralStateTree(tree=phylogeny, ancestral_state_trace_vector=anc_states, include_start_states=false, file="Usuarios/veronicari/Documentos/Github/passerdiet/Output/anc_states_MuSSEdietncar.tree", burnin=5000, summary_statistic="MAP", site=1)

q()

